// Biblioteca da Filosofia da M√∫sica - Carrega e exibe os textos da biblioteca

(function () {
  // Lista dos 19 textos da biblioteca (nomes dos arquivos sem extens√£o)
  const LIBRARY_FILES = [
    "1- Dedicat√≥ria para a Musa",
    "2- Para uma conceitua√ß√£o",
    "3- Elementos Fundamentais da M√∫sica",
    "4- Natureza e Filosofia da M√∫sica",
    "5- M√∫sica, Mem√≥ria e Filosofia",
    "6- Acessibilidade Musical e o Projeto Pessoal",
    "7- A Rela√ß√£o Humana com a M√∫sica Inerente, Inervada e Inesgot√°vel",
    "8- Extremos da Sensa√ß√£o Musical",
    "9- A Transi√ß√£o Hist√≥rica da M√∫sica",
    "10- Mem√≥ria e o Refr√£o como Estrat√©gia de Mercado",
    "11- Repeti√ß√£o e Sucesso Matematicamente Demonstrados",
    "12- A Hist√≥ria",
    "13- A Playlist Gregoriana",
    "14- A Playlist dos Goliardos",
    "15- Madrigal",
    "16- Bach",
    "17 - √ìpera",
    "18- O Pre√ßo da M√∫sica Cl√°ssica",
    "19- A Ind√∫stria da M√∫sica"
  ];

  function buildButtons() {
    const container = document.getElementById('libraryButtons');
    if (!container) {
      console.error('‚ùå Elemento libraryButtons n√£o encontrado!');
      return;
    }

    console.log('üìö Construindo bot√µes da biblioteca...');

    LIBRARY_FILES.forEach((fileName, index) => {
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'btn-dial quote-btn library-btn';
      btn.setAttribute('aria-label', `Ler ${fileName}`);
      
      // Extrair o n√∫mero e t√≠tulo para exibir
      const match = fileName.match(/^(\d+)[-\s]+(.+)$/);
      const title = match ? match[2] : fileName;
      
      btn.textContent = title;
      btn.dataset.fileName = fileName + '.md';
      btn.addEventListener('click', () => showLibraryText(fileName));
      
      container.appendChild(btn);
    });

    console.log('‚úÖ', LIBRARY_FILES.length, 'bot√µes da biblioteca criados');
  }

  function showLibraryText(fileName) {
    const card = document.getElementById('libraryCard');
    const content = document.getElementById('libraryContent');
    
    if (!card || !content) {
      console.error('‚ùå Elementos do card da biblioteca n√£o encontrados!');
      return;
    }

    console.log('üìñ Carregando texto da biblioteca:', fileName);

    // Tentar buscar no MARKDOWN_CONTENT (se os arquivos foram processados)
    const markdownFileName = fileName + '.md';
    let text = null;

    if (typeof window !== 'undefined' && window.MARKDOWN_CONTENT) {
      console.log('üìö MARKDOWN_CONTENT dispon√≠vel, buscando:', markdownFileName);
      console.log('üìö Total de arquivos em MARKDOWN_CONTENT:', Object.keys(window.MARKDOWN_CONTENT).length);
      
      // Buscar exatamente pelo nome do arquivo
      text = window.MARKDOWN_CONTENT[markdownFileName];
      
      if (text) {
        console.log('‚úÖ Texto encontrado exatamente no MARKDOWN_CONTENT:', markdownFileName);
      } else {
        console.log('‚ö†Ô∏è Busca exata falhou, tentando busca normalizada...');
        
        // Normalizar nome para busca (remover acentos, espa√ßos, etc)
        const normalize = (str) => {
          if (!str) return '';
          return String(str)
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .toLowerCase()
            .trim()
            .replace(/\s+/g, ' ');
        };
        
        const normalizedSearch = normalize(fileName);
        console.log('üîç Buscando nome normalizado:', normalizedSearch);
        
        // Obter todas as chaves e mostrar algumas para debug
        const allKeys = Object.keys(window.MARKDOWN_CONTENT);
        const libraryKeys = allKeys.filter(k => /^\d+-/.test(k));
        console.log('üìã Arquivos da biblioteca encontrados no MARKDOWN_CONTENT:', libraryKeys.length);
        console.log('üìã Primeiros 5:', libraryKeys.slice(0, 5));
        
        // Tentar buscar com varia√ß√µes do nome
        let foundKey = null;
        
        // 1. Busca exata normalizada
        foundKey = allKeys.find(key => {
          const keyWithoutExt = key.replace(/\.md$/i, '');
          return normalize(keyWithoutExt) === normalizedSearch;
        });
        
        // 2. Busca parcial (cont√©m)
        if (!foundKey) {
          foundKey = allKeys.find(key => {
            const keyWithoutExt = key.replace(/\.md$/i, '');
            const normalizedKey = normalize(keyWithoutExt);
            return normalizedKey.includes(normalizedSearch) || 
                   normalizedSearch.includes(normalizedKey) ||
                   // Buscar por n√∫mero no in√≠cio (ex: "11-")
                   (fileName.match(/^\d+-/) && key.match(/^\d+-/) && 
                    fileName.match(/^\d+-/)[0] === key.match(/^\d+-/)[0]);
          });
        }
        
        // 3. Busca por n√∫mero (√∫ltima tentativa)
        if (!foundKey && fileName.match(/^\d+-/)) {
          const numberMatch = fileName.match(/^(\d+)-/);
          if (numberMatch) {
            const fileNumber = numberMatch[1]; // Apenas o n√∫mero, sem o tra√ßo
            // Buscar chave que come√ßa com o mesmo n√∫mero
            const keysWithNumber = allKeys.filter(key => {
              const keyMatch = key.match(/^(\d+)-/);
              return keyMatch && keyMatch[1] === fileNumber;
            });
            console.log('üî¢ Buscando por n√∫mero:', fileNumber);
            console.log('üî¢ Chaves encontradas com esse n√∫mero:', keysWithNumber);
            foundKey = keysWithNumber[0]; // Pegar a primeira correspond√™ncia
          }
        }
        
        if (foundKey) {
          text = window.MARKDOWN_CONTENT[foundKey];
          console.log('‚úÖ Texto encontrado com nome alternativo:', foundKey);
          console.log('‚úÖ Tamanho do texto:', text ? text.length : 0, 'caracteres');
        } else {
          console.warn('‚ö†Ô∏è Texto n√£o encontrado no MARKDOWN_CONTENT ap√≥s todas as tentativas');
          console.warn('üîç Procurando por:', fileName);
          console.warn('üìã Chaves que come√ßam com "11":', allKeys.filter(k => k.includes('11')).slice(0, 5));
        }
      }
    } else {
      console.warn('‚ö†Ô∏è MARKDOWN_CONTENT n√£o est√° dispon√≠vel');
    }

    if (text) {
      // Converter Markdown b√°sico para HTML
      console.log('‚úÖ Exibindo texto encontrado, tamanho:', text.length, 'caracteres');
      content.innerHTML = convertMarkdownToHTML(text);
      card.classList.remove('hidden');
      
      // Scroll suave at√© o card
      setTimeout(() => {
        card.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }, 100);
    } else {
      // Texto n√£o encontrado - tentar carregar do arquivo diretamente
      console.warn('‚ö†Ô∏è Texto n√£o encontrado no MARKDOWN_CONTENT');
      console.log('üìÅ Tentando carregar diretamente do arquivo:', `./biblioteca/${markdownFileName}`);
      
      // Verificar se estamos em protocolo file:// (n√£o funciona com fetch)
      const isFileProtocol = window.location.protocol === 'file:';
      
      if (isFileProtocol) {
        console.warn('‚ö†Ô∏è Protocolo file:// detectado. Fetch n√£o funciona localmente.');
        console.warn('üí° Os arquivos da biblioteca devem estar incorporados no markdown-content.js');
        console.warn('üí° Execute: node scripts/build-content.js');
        console.warn('üí° Ou acesse atrav√©s de um servidor HTTP (http://localhost:8000)');
        
        // Mostrar mensagem mais √∫til com informa√ß√µes de debug
        const allKeys = window.MARKDOWN_CONTENT ? Object.keys(window.MARKDOWN_CONTENT) : [];
        const similarKeys = allKeys.filter(k => {
          const fileNameLower = fileName.toLowerCase();
          const keyLower = k.toLowerCase();
          return keyLower.includes(fileNameLower.substring(0, 10)) || 
                 fileNameLower.includes(keyLower.substring(0, 10));
        });
        
        content.innerHTML = `
          <div style="color: #fbbf24; padding: 2rem; text-align: center;">
            <p style="margin-bottom: 1rem;">
              <strong>Texto n√£o dispon√≠vel no momento.</strong>
            </p>
            <p style="color: #bfdbfe; font-size: 0.9rem;">
              Para visualizar este texto, √© necess√°rio executar o script de build ou acessar atrav√©s de um servidor HTTP.
            </p>
            <p style="color: #93c5fd; font-size: 0.85rem; margin-top: 1rem;">
              Arquivo: "${fileName}"
            </p>
            ${similarKeys.length > 0 ? `<p style="color: #60a5fa; font-size: 0.8rem; margin-top: 0.5rem;">Arquivos similares encontrados: ${similarKeys.slice(0, 3).join(', ')}</p>` : ''}
          </div>
        `;
        card.classList.remove('hidden');
        return;
      }
      
      fetch(`./biblioteca/${markdownFileName}`)
        .then(res => {
          if (!res.ok) {
            throw new Error(`HTTP ${res.status} ${res.statusText}`);
          }
          return res.text();
        })
        .then(markdownText => {
          console.log('‚úÖ Arquivo carregado com sucesso via fetch');
          content.innerHTML = convertMarkdownToHTML(markdownText);
          card.classList.remove('hidden');
          
          setTimeout(() => {
            card.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
          }, 100);
        })
        .catch(err => {
          console.error('‚ùå Erro ao carregar texto da biblioteca:', err);
          console.error('‚ùå Erro completo:', err.message, err.stack);
          
          content.innerHTML = `
            <div style="color: #fbbf24; padding: 2rem; text-align: center;">
              <p style="margin-bottom: 1rem;">
                <strong>Texto n√£o dispon√≠vel no momento.</strong>
              </p>
              <p style="color: #bfdbfe; font-size: 0.9rem;">
                Este texto ainda est√° sendo processado. Tente recarregar a p√°gina ou verifique o console para mais informa√ß√µes.
              </p>
              <p style="color: #93c5fd; font-size: 0.85rem; margin-top: 1rem;">
                Arquivo: "${fileName}"
              </p>
            </div>
          `;
          card.classList.remove('hidden');
        });
    }
  }

  function convertMarkdownToHTML(markdown) {
    if (!markdown) return '<p>Conte√∫do n√£o dispon√≠vel.</p>';

    let html = markdown;

    // Converter quebras de linha duplas em par√°grafos
    html = html.split(/\n\n+/).map(paragraph => {
      paragraph = paragraph.trim();
      if (!paragraph) return '';
      
      // Converter URLs do YouTube em links clic√°veis
      paragraph = paragraph.replace(
        /(https?:\/\/)?(www\.)?(youtube\.com\/watch\?v=|youtu\.be\/)([a-zA-Z0-9_-]+)/g,
        '<a href="https://www.youtube.com/watch?v=$4" target="_blank" style="color: #60a5fa; text-decoration: underline;">https://www.youtube.com/watch?v=$4</a>'
      );
      
      // Converter negrito **texto** ou __texto__
      paragraph = paragraph.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
      paragraph = paragraph.replace(/__(.+?)__/g, '<strong>$1</strong>');
      
      // Converter it√°lico *texto* ou _texto_
      paragraph = paragraph.replace(/\*(.+?)\*/g, '<em>$1</em>');
      paragraph = paragraph.replace(/_(.+?)_/g, '<em>$1</em>');
      
      return `<p>${paragraph}</p>`;
    }).filter(p => p).join('\n');

    // Converter t√≠tulos (# T√≠tulo)
    html = html.replace(/^### (.+)$/gm, '<h3 style="color: #93c5fd; margin-top: 1.5rem; margin-bottom: 0.5rem;">$1</h3>');
    html = html.replace(/^## (.+)$/gm, '<h2 style="color: #93c5fd; margin-top: 2rem; margin-bottom: 1rem; font-size: 1.5rem;">$1</h2>');
    html = html.replace(/^# (.+)$/gm, '<h1 style="color: #bfdbfe; margin-top: 2rem; margin-bottom: 1rem; font-size: 2rem;">$1</h1>');

    return html;
  }

  function closeLibraryCard() {
    const card = document.getElementById('libraryCard');
    if (card) {
      card.classList.add('hidden');
    }
  }

  function init() {
    console.log('üìö Inicializando sistema da biblioteca...');
    
    // Construir bot√µes
    buildButtons();
    
    // Adicionar event listener ao bot√£o de fechar
    const closeBtn = document.getElementById('closeLibraryCard');
    if (closeBtn) {
      closeBtn.addEventListener('click', closeLibraryCard);
    }
    
    console.log('‚úÖ Sistema da biblioteca inicializado');
  }

  // Inicializar quando o DOM estiver pronto
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();

