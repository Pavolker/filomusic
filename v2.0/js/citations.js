// Cita√ß√µes sobre a M√∫sica - leitura de citacoes.md e UI din√¢mica

(function () {
  const QUOTES_MD_URL = './citacoes.md';
  
  // Cita√ß√µes incorporadas como fallback caso o arquivo n√£o seja carregado
  const EMBEDDED_CITATIONS = `"Uma s√≥ coisa pode ser ao mesmo tempo boa e m√°, e tamb√©m indiferente. Por exemplo, a m√∫sica √© boa para o melanc√≥lico, m√° para o aflito, para o surdo n√£o √© boa nem m√°"
Spinoza 


"Um dia, quando todos os livros forem queimados por in√∫teis, h√° de haver algu√©m, pode ser que tenor, e talvez italiano, que ensine esta verdade aos homens. Tudo √© m√∫sica, meu amigo. No princ√≠pio era o d√≥, e o d√≥ fez-se r√©, etc". Machado de Assis

"Certos momentos da m√∫sica. A m√∫sica era da categoria do pensamento, ambos vibravam no mesmo movimento e esp√©cie".  
Clarice Lispector


"M√∫sica e mito tr√°gicos s√£o express√µes id√™nticas da capacidade dionis√≠aca do povo, sendo insepar√°vel uma do outro". 
Friedrich Nietzsche


"√ì rei, eu guardei tal m√∫sica no fundo da minha alma, e toda vez que a relembro, √© mais um momento de √™xtase".
Bhagavad Gita


"E assim o longo e o curto se delimitam entre si, o alto e o baixo surgem de seu pr√≥prio contraste, as notas musicais se harmonizam na pr√≥pria melodia, e aquele que veio antes demarca o que veio ap√≥s". 
Tao Te Ching`;

  function showFallback(message) {
    const btns = document.getElementById('quoteButtons');
    const card = document.getElementById('quoteCard');

    if (!btns) return;

    btns.innerHTML = '';
    const fallback = document.createElement('p');
    fallback.className = 'quote-fallback';
    fallback.textContent = message;
    btns.appendChild(fallback);

    if (card) {
      card.classList.add('hidden');
    }
  }

  function parseCitations(mdText) {
    // Dividir por blocos (linhas vazias duplas)
    const blocks = mdText.split(/\n\s*\n+/g).map(b => b.trim()).filter(Boolean);
    const citations = [];

    console.log('üìñ Parseando cita√ß√µes, blocos encontrados:', blocks.length);

    for (const block of blocks) {
      const lines = block.split(/\n+/).map(l => l.trim()).filter(Boolean);
      
      if (lines.length === 0) continue;

      let quote = '';
      let author = '';

      // Estrat√©gia 1: Se temos m√∫ltiplas linhas, primeira linha = cita√ß√£o, resto = autor
      if (lines.length >= 2) {
        const firstLine = lines[0];
        
        // Tentar primeiro extrair autor da primeira linha se houver padr√£o "texto". Autor
        // Padr√£o para: "texto etc". Machado de Assis (ponto antes das aspas finais)
        let match = firstLine.match(/[""](.+?)\.\s*[""]\s+([A-Z][A-Za-z\s]+?)(?:\s|\.|$)/);
        
        // Padr√£o alternativo: "texto" Autor (sem ponto antes das aspas)
        if (!match) {
          match = firstLine.match(/[""](.+?)[""]\s+([A-Z][A-Za-z\s]+?)(?:\s|\.|$)/);
        }
        
        if (match) {
          // Autor encontrado na primeira linha
          quote = match[1].trim() + '.'; // Adiciona o ponto de volta
          author = match[2].replace(/\.$/, '').trim();
        } else {
          // Autor est√° nas linhas seguintes
          quote = firstLine
            .replace(/^[\u201C\u201D"]+|[\u201C\u201D"]+$/g, '')
            .trim();
          
          author = lines.slice(1)
            .join(' ')
            .replace(/^[\s\.]+|[\s\.]+$/g, '')
            .trim();
        }
      } 
      // Estrat√©gia 2: Linha √∫nica - procurar padr√£o "cita√ß√£o" Autor
      else if (lines.length === 1) {
        const text = lines[0];
        
        // Padr√£o para casos como: "texto etc". Machado de Assis
        // O ponto est√° antes do fechamento das aspas: "texto.". Autor
        let match = text.match(/[""](.+?)\.\s*[""]\s+([A-Z][A-Za-z\s]+?)(?:\s|\.|$)/);
        
        // Se n√£o encontrar, tenta padr√£o sem ponto: "texto" Autor
        if (!match) {
          match = text.match(/[""](.+?)[""]\s+([A-Z][A-Za-z\s]+?)(?:\s|\.|$)/);
        }
        
        // Padr√£o mais flex√≠vel: qualquer texto ap√≥s as aspas finais
        if (!match) {
          match = text.match(/[""](.+?)[""]\s+(.+)$/);
        }
        
        if (match) {
          // Se o match incluiu ponto no grupo 1, mant√©m; sen√£o, adiciona se necess√°rio
          quote = match[1].trim();
          // Se o padr√£o tinha ponto, ele foi capturado; se n√£o, verifica se precisa
          if (!quote.match(/\.$/) && text.match(/[""](.+?)\.\s*[""]/)) {
            quote += '.';
          }
          author = match[2].replace(/^[\s\.]+|[\s\.]+$/g, '').trim();
        } else {
          // Fallback: tudo √© cita√ß√£o se n√£o h√° padr√£o claro
          quote = text
            .replace(/^[\u201C\u201D"]+|[\u201C\u201D"]+$/g, '')
            .trim();
          author = '';
        }
      }

      // Limpar autor (remover pontos finais e espa√ßos extras)
      author = author.replace(/^[\s\.]+|[\s\.]+$/g, '').trim();

      // Validar se temos cita√ß√£o e autor
      if (quote && author) {
        citations.push({ author, text: quote });
        console.log('‚úÖ Cita√ß√£o parseada:', author, '-', quote.substring(0, 50) + '...');
      } else {
        console.warn('‚ö†Ô∏è Cita√ß√£o inv√°lida ou sem autor:', { quote: quote.substring(0, 30), author });
      }
    }

    console.log(`‚úÖ Total de cita√ß√µes parseadas: ${citations.length}`);
    return citations;
  }

  function buildUI(citations) {
    const btns = document.getElementById('quoteButtons');
    const card = document.getElementById('quoteCard');
    const quoteTextEl = document.getElementById('quoteText');
    const quoteAuthorEl = document.getElementById('quoteAuthor');
    const closeBtn = document.getElementById('closeQuoteCard');

    if (!btns) {
      console.error('‚ùå Elemento quoteButtons n√£o encontrado!');
      return;
    }
    if (!card || !quoteTextEl || !quoteAuthorEl) {
      console.error('‚ùå Elementos do card de cita√ß√£o n√£o encontrados!');
      return;
    }

    console.log('üé® Construindo UI para', citations.length, 'cita√ß√µes');

    // Limpar bot√µes existentes
    btns.innerHTML = '';

    if (citations.length === 0) {
      console.warn('‚ö†Ô∏è Nenhuma cita√ß√£o para exibir');
      showFallback('Nenhuma cita√ß√£o encontrada.');
      return;
    }

    function closeQuote() {
      card.classList.add('hidden');
    }

    function showQuote(c) {
      quoteTextEl.textContent = `"${c.text}"`;
      quoteAuthorEl.textContent = c.author;
      card.classList.remove('hidden');
      
      // Scroll suave at√© o card
      setTimeout(() => {
        card.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
      }, 100);
    }

    // Adicionar event listener ao bot√£o de fechar
    if (closeBtn) {
      closeBtn.addEventListener('click', closeQuote);
    }

    citations.forEach((c, idx) => {
      const btn = document.createElement('button');
      btn.type = 'button';
      btn.className = 'btn-dial quote-btn';
      btn.setAttribute('aria-label', `Ver cita√ß√£o de ${c.author}`);
      btn.textContent = c.author;
      btn.addEventListener('click', () => showQuote(c));
      btns.appendChild(btn);
    });

    console.log('‚úÖ', citations.length, 'bot√µes de cita√ß√£o criados');
  }

  async function init() {
    console.log('üìö Inicializando sistema de cita√ß√µes...');
    let text = null;
    
    // Detectar se est√° em protocolo file:// (n√£o funciona com fetch)
    const isFileProtocol = window.location.protocol === 'file:';
    
    if (isFileProtocol) {
      // Usar cita√ß√µes incorporadas diretamente quando em file://
      console.log('üìÅ Protocolo file:// detectado. Usando cita√ß√µes incorporadas.');
      text = EMBEDDED_CITATIONS;
      console.log('‚úÖ Usando cita√ß√µes incorporadas, tamanho:', text.length, 'caracteres');
    } else {
      // Tentar carregar do arquivo apenas quando n√£o estiver em file://
      try {
        console.log('üìÅ Tentando carregar:', QUOTES_MD_URL);
        const res = await fetch(QUOTES_MD_URL);
        
        if (!res.ok) {
          throw new Error(`HTTP ${res.status}: ${res.statusText}`);
        }
        
        text = await res.text();
        console.log('‚úÖ Arquivo citacoes.md carregado do servidor, tamanho:', text.length, 'caracteres');
        
      } catch (err) {
        console.warn('‚ö†Ô∏è N√£o foi poss√≠vel carregar citacoes.md:', err.message);
        console.log('üí° Usando cita√ß√µes incorporadas como fallback...');
        
        // Usar cita√ß√µes incorporadas como fallback
        text = EMBEDDED_CITATIONS;
        console.log('‚úÖ Usando cita√ß√µes incorporadas, tamanho:', text.length, 'caracteres');
      }
    }
    
    if (!text || text.trim().length === 0) {
      console.error('‚ùå Nenhum texto de cita√ß√µes dispon√≠vel!');
      showFallback('Erro: nenhuma cita√ß√£o dispon√≠vel.');
      return;
    }
    
    console.log('üìÑ Primeiros 200 caracteres:', text.substring(0, 200));
    
    const citations = parseCitations(text);
    
    if (citations.length === 0) {
      console.error('‚ùå Nenhuma cita√ß√£o foi parseada!');
      showFallback('Erro ao processar cita√ß√µes. Verifique o console para mais detalhes.');
      return;
    }
    
    console.log('‚úÖ Cita√ß√µes parseadas com sucesso:', citations.length);
    buildUI(citations);
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
